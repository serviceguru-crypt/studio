
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user belongs to an organization
    function isUserInOrg(orgId, userId) {
      return exists(/databases/$(database)/documents/organizations/$(orgId)/users/$(userId));
    }
    
    // Helper function to get a user's role
    function getUserRole(orgId, userId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)/users/$(userId)).data.role;
    }

    // Secure the organizations collection
    match /organizations/{orgId} {
      // Only an authenticated user who is part of the organization can read its profile
      allow read: if request.auth != null && isUserInOrg(orgId, request.auth.uid);
      // Only an Admin of the organization can update it
      allow write: if request.auth != null && getUserRole(orgId, request.auth.uid) == 'Admin';

      // Secure the nested collections
      match /{collection}/{docId} {
        // General rule: A user must be authenticated and part of the organization to access its sub-collections.
        allow read, write: if request.auth != null && isUserInOrg(orgId, request.auth.uid);
      }
      
      // More specific rules for users collection
      match /users/{userId} {
        // Allow read access to any user within the same organization
        allow read: if request.auth != null && isUserInOrg(orgId, request.auth.uid);
        // Allow a user to create/update their own document, or an admin to update any user
        allow write: if request.auth != null && (request.auth.uid == userId || getUserRole(orgId, request.auth.uid) == 'Admin');
      }
      
       // More specific rules for customers, deals, and leads
      match /{collection}/{docId}
        where collection in ['customers', 'deals', 'leads'] {
        
        // Allow read access if user is an Admin, or if they are the owner of the document
        allow read: if request.auth != null && isUserInOrg(orgId, request.auth.uid) && (getUserRole(orgId, request.auth.uid) == 'Admin' || resource.data.ownerId == request.auth.uid);
        
        // Allow create if user is authenticated in the org
        allow create: if request.auth != null && isUserInOrg(orgId, request.auth.uid);
        
        // Allow update/delete if user is an Admin, or if they are the owner
        allow update, delete: if request.auth != null && isUserInOrg(orgId, request.auth.uid) && (getUserRole(orgId, request.auth.uid) == 'Admin' || resource.data.ownerId == request.auth.uid);

        // Rules for activity subcollections
         match /activity/{activityId} {
            allow read: if request.auth != null && isUserInOrg(orgId, request.auth.uid);
            allow write: if request.auth != null && isUserInOrg(orgId, request.auth.uid);
         }
      }
    }
  }
}
